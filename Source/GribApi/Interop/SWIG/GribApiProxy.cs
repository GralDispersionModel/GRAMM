/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Grib.Api.Interop.SWIG
{

    public class GribApiProxy
    {
        public static SWIGTYPE_p_grib_fieldset GribFieldsetNewFromFiles(GribContext c, string[] filenames, int nfiles, string[] keys, int nkeys, string where_string, string order_by_string, out int err)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribFieldsetNewFromFiles(c.Reference, filenames, nfiles, keys, nkeys, where_string, order_by_string, out err);
            SWIGTYPE_p_grib_fieldset ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_fieldset(cPtr, false);
            return ret;
        }

        public static void GribFieldsetDelete(SWIGTYPE_p_grib_fieldset set)
        {
            GribApiProxyPINVOKE.GribFieldsetDelete(SWIGTYPE_p_grib_fieldset.getCPtr(set));
        }

        public static void GribFieldsetRewind(SWIGTYPE_p_grib_fieldset set)
        {
            GribApiProxyPINVOKE.GribFieldsetRewind(SWIGTYPE_p_grib_fieldset.getCPtr(set));
        }

        public static void GribFieldsetApplyOrderBy(SWIGTYPE_p_grib_fieldset set, string order_by_string)
        {
            int ret = GribApiProxyPINVOKE.GribFieldsetApplyOrderBy(SWIGTYPE_p_grib_fieldset.getCPtr(set), order_by_string);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribFieldsetNextHandle(SWIGTYPE_p_grib_fieldset set, out int err)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribFieldsetNextHandle(SWIGTYPE_p_grib_fieldset.getCPtr(set), out err);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static void GribFieldsetCount(SWIGTYPE_p_grib_fieldset set)
        {
            int ret = GribApiProxyPINVOKE.GribFieldsetCount(SWIGTYPE_p_grib_fieldset.getCPtr(set));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribValuesCheck(GribHandle h, SWIGTYPE_p_grib_values values, int count)
        {
            int ret = GribApiProxyPINVOKE.GribValuesCheck(h.Reference, SWIGTYPE_p_grib_values.getCPtr(values), count);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static SWIGTYPE_p_grib_index GribIndexNewFromFile(GribContext c, string filename, string keys, out int err)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexNewFromFile(c.Reference, filename, keys, out err);
            SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
            return ret;
        }

        public static SWIGTYPE_p_grib_index GribIndexNew(GribContext c, string keys, out int err)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexNew(c.Reference, keys, out err);
            SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
            return ret;
        }

        public static void GribIndexAddFile(SWIGTYPE_p_grib_index index, string filename)
        {
            int ret = GribApiProxyPINVOKE.GribIndexAddFile(SWIGTYPE_p_grib_index.getCPtr(index), filename);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexWrite(SWIGTYPE_p_grib_index index, string filename)
        {
            int ret = GribApiProxyPINVOKE.GribIndexWrite(SWIGTYPE_p_grib_index.getCPtr(index), filename);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static SWIGTYPE_p_grib_index GribIndexRead(GribContext c, string filename, out int err)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribIndexRead(c.Reference, filename, out err);
            SWIGTYPE_p_grib_index ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_index(cPtr, false);
            return ret;
        }

        public static void GribIndexGetSize(SWIGTYPE_p_grib_index index, string key, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribIndexGetSize(SWIGTYPE_p_grib_index.getCPtr(index), key, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexGetLong(SWIGTYPE_p_grib_index index, string key, int[] values, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribIndexGetLong(SWIGTYPE_p_grib_index.getCPtr(index), key, values, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexGetDouble(SWIGTYPE_p_grib_index index, string key, double[] values, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribIndexGetDouble(SWIGTYPE_p_grib_index.getCPtr(index), key, values, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexGetString(SWIGTYPE_p_grib_index index, string key, out System.Text.StringBuilder values, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribIndexGetString(SWIGTYPE_p_grib_index.getCPtr(index), key, out values, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexSelectLong(SWIGTYPE_p_grib_index index, string key, int value)
        {
            int ret = GribApiProxyPINVOKE.GribIndexSelectLong(SWIGTYPE_p_grib_index.getCPtr(index), key, value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexSelectDouble(SWIGTYPE_p_grib_index index, string key, double value)
        {
            int ret = GribApiProxyPINVOKE.GribIndexSelectDouble(SWIGTYPE_p_grib_index.getCPtr(index), key, value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIndexSelectString(SWIGTYPE_p_grib_index index, string key, string value)
        {
            int ret = GribApiProxyPINVOKE.GribIndexSelectString(SWIGTYPE_p_grib_index.getCPtr(index), key, value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribHandleNewFromIndex(SWIGTYPE_p_grib_index index, out int err)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromIndex(SWIGTYPE_p_grib_index.getCPtr(index), out err);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static void GribIndexDelete(SWIGTYPE_p_grib_index index)
        {
            GribApiProxyPINVOKE.GribIndexDelete(SWIGTYPE_p_grib_index.getCPtr(index));
        }

        public static void GribCountInFile(GribContext c, GribFile f, out int n)
        {
            int ret = GribApiProxyPINVOKE.GribCountInFile(c.Reference, f.Reference, out n);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribHandleNewFromFile(GribContext c, GribFile f, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromFile(c.Reference, f.Reference, out error);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static void GribWriteMessage(GribHandle h, string file, string mode)
        {
            int ret = GribApiProxyPINVOKE.GribWriteMessage(h.Reference, file, mode);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribUtilSectionsCopy(GribHandle hfrom, GribHandle hto, int what, out int err)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribUtilSectionsCopy(hfrom.Reference, hto.Reference, what, out err);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static SWIGTYPE_p_grib_string_list GribUtilGetParamId(string mars_param)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilGetParamId(mars_param);
            SWIGTYPE_p_grib_string_list ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_string_list(cPtr, false);
            return ret;
        }

        public static SWIGTYPE_p_grib_string_list GribUtilGetMarsParam(string param_id)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribUtilGetMarsParam(param_id);
            SWIGTYPE_p_grib_string_list ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_string_list(cPtr, false);
            return ret;
        }

        public static GribHandle GribHandleNewFromMessage(GribContext c, byte[] data, SizeT data_len)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromMessage(c.Reference, data, data_len.Value);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleNewFromMultiMessage(GribContext c, out System.IntPtr data, ref SizeT data_len, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromMultiMessage(c.Reference, out data, ref data_len.Value, out error);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleNewFromMessageCopy(GribContext c, byte[] data, SizeT data_len)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromMessageCopy(c.Reference, data, data_len.Value);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleNewFromTemplate(GribContext c, string res_name)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromTemplate(c.Reference, res_name);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleNewFromSamples(GribContext c, string res_name)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromSamples(c.Reference, res_name);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleClone(GribHandle h)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleClone(h.Reference);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static void GribHandleDelete(GribHandle h)
        {
            int ret = GribApiProxyPINVOKE.GribHandleDelete(h.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static SWIGTYPE_p_grib_multi_handle GribMultiHandleNew(GribContext c)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribMultiHandleNew(c.Reference);
            SWIGTYPE_p_grib_multi_handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_multi_handle(cPtr, false);
            return ret;
        }

        public static void GribMultiHandleAppend(GribHandle h, int start_section, SWIGTYPE_p_grib_multi_handle mh)
        {
            int ret = GribApiProxyPINVOKE.GribMultiHandleAppend(h.Reference, start_section, SWIGTYPE_p_grib_multi_handle.getCPtr(mh));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribMultiHandleDelete(SWIGTYPE_p_grib_multi_handle mh)
        {
            int ret = GribApiProxyPINVOKE.GribMultiHandleDelete(SWIGTYPE_p_grib_multi_handle.getCPtr(mh));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribMultiHandleWrite(SWIGTYPE_p_grib_multi_handle mh, GribFile f)
        {
            int ret = GribApiProxyPINVOKE.GribMultiHandleWrite(SWIGTYPE_p_grib_multi_handle.getCPtr(mh), f.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetMessage(GribHandle h, out System.IntPtr message, ref SizeT message_length)
        {
            int ret = GribApiProxyPINVOKE.GribGetMessage(h.Reference, out message, ref message_length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetMessageCopy(GribHandle h, byte[] message, ref SizeT message_length)
        {
            int ret = GribApiProxyPINVOKE.GribGetMessageCopy(h.Reference, message, ref message_length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribValuesIterator GribIteratorNew(GribHandle h, uint flags, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribIteratorNew(h.Reference, flags, out error);

            return pVal == System.IntPtr.Zero ? null : new GribValuesIterator(pVal);
        }

        public static void GribGetData(GribHandle h, double[] lats, double[] lons, double[] values, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribGetData(h.Reference, lats, lons, values, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static int GribIteratorNext(GribValuesIterator i, out double lat, out double lon, out double value)
        {
            return GribApiProxyPINVOKE.GribIteratorNext(i.Reference, out lat, out lon, out value);
        }

        public static void GribIteratorPrevious(GribValuesIterator i, out double lat, out double lon, out double value)
        {
            int ret = GribApiProxyPINVOKE.GribIteratorPrevious(i.Reference, out lat, out lon, out value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIteratorHasNext(GribValuesIterator i)
        {
            int ret = GribApiProxyPINVOKE.GribIteratorHasNext(i.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIteratorReset(GribValuesIterator i)
        {
            int ret = GribApiProxyPINVOKE.GribIteratorReset(i.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribIteratorDelete(GribValuesIterator i)
        {
            int ret = GribApiProxyPINVOKE.GribIteratorDelete(i.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static SWIGTYPE_p_grib_nearest GribNearestNew(GribHandle h, out int error)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribNearestNew(h.Reference, out error);
            SWIGTYPE_p_grib_nearest ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_nearest(cPtr, false);
            return ret;
        }

        public static void GribNearestFind(SWIGTYPE_p_grib_nearest nearest, GribHandle h, double inlat, double inlon, uint flags, double[] outlats, double[] outlons, double[] values, double[] distances, int[] indexes, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.GribNearestFind(SWIGTYPE_p_grib_nearest.getCPtr(nearest), h.Reference, inlat, inlon, flags, outlats, outlons, values, distances, indexes, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribNearestDelete(SWIGTYPE_p_grib_nearest nearest)
        {
            int ret = GribApiProxyPINVOKE.GribNearestDelete(SWIGTYPE_p_grib_nearest.getCPtr(nearest));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribNearestFindMultiple(GribHandle h, int is_lsm, double[] inlats, double[] inlons, int npoints, double[] outlats, double[] outlons, double[] values, double[] distances, int[] indexes)
        {
            int ret = GribApiProxyPINVOKE.GribNearestFindMultiple(h.Reference, is_lsm, inlats, inlons, npoints, outlats, outlons, values, distances, indexes);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetOffset(GribHandle h, string key, ref SizeT offset)
        {
            int ret = GribApiProxyPINVOKE.GribGetOffset(h.Reference, key, ref offset.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetSize(GribHandle h, string key, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribGetSize(h.Reference, key, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetLength(GribHandle h, string key, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribGetLength(h.Reference, key, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetLong(GribHandle h, string key, out int value)
        {
            int ret = GribApiProxyPINVOKE.GribGetLong(h.Reference, key, out value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetDouble(GribHandle h, string key, out double value)
        {
            int ret = GribApiProxyPINVOKE.GribGetDouble(h.Reference, key, out value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetDoubleElement(GribHandle h, string key, int i, out double value)
        {
            int ret = GribApiProxyPINVOKE.GribGetDoubleElement(h.Reference, key, i, out value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetDoubleElements(GribHandle h, string key, SWIGTYPE_p_int i, int size, out double value)
        {
            int ret = GribApiProxyPINVOKE.GribGetDoubleElements(h.Reference, key, SWIGTYPE_p_int.getCPtr(i), size, out value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetString(GribHandle h, string key, System.Text.StringBuilder mesg, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribGetString(h.Reference, key, mesg, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetBytes(GribHandle h, string key, byte[] bytes, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribGetBytes(h.Reference, key, bytes, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetDoubleArray(GribHandle h, string key, double[] vals, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribGetDoubleArray(h.Reference, key, vals, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetLongArray(GribHandle h, string key, int[] vals, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribGetLongArray(h.Reference, key, vals, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribCopyNamespace(GribHandle dest, string name, GribHandle src)
        {
            int ret = GribApiProxyPINVOKE.GribCopyNamespace(dest.Reference, name, src.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetLong(GribHandle h, string key, int val)
        {
            int ret = GribApiProxyPINVOKE.GribSetLong(h.Reference, key, val);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetDouble(GribHandle h, string key, double val)
        {
            int ret = GribApiProxyPINVOKE.GribSetDouble(h.Reference, key, val);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetString(GribHandle h, string key, string mesg, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribSetString(h.Reference, key, mesg, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetBytes(GribHandle h, string key, byte[] bytes, ref SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribSetBytes(h.Reference, key, bytes, ref length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetDoubleArray(GribHandle h, string key, double[] vals, SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribSetDoubleArray(h.Reference, key, vals, length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetForceDoubleArray(GribHandle h, string key, double[] vals, SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribSetForceDoubleArray(h.Reference, key, vals, length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribSetLongArray(GribHandle h, string key, int[] vals, SizeT length)
        {
            int ret = GribApiProxyPINVOKE.GribSetLongArray(h.Reference, key, vals, length.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribDumpContent(GribHandle h, GribFile arg1, string mode, uint option_flags, byte[] arg)
        {
            GribApiProxyPINVOKE.GribDumpContent(h.Reference, arg1.Reference, mode, option_flags, arg);
        }

        public static void GribDumpActionTree(GribContext c, GribFile f)
        {
            GribApiProxyPINVOKE.GribDumpActionTree(c.Reference, f.Reference);
        }

        public static GribContext GribContextGetDefault()
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribContextGetDefault();

            return pVal == System.IntPtr.Zero ? null : new GribContext(pVal);
        }

        public static GribContext GribContextNew(GribContext c)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribContextNew(c.Reference);

            return pVal == System.IntPtr.Zero ? null : new GribContext(pVal);
        }

        public static void GribContextDelete(GribContext c)
        {
            GribApiProxyPINVOKE.GribContextDelete(c.Reference);
        }

        public static void GribGtsHeaderOn(GribContext c)
        {
            GribApiProxyPINVOKE.GribGtsHeaderOn(c.Reference);
        }

        public static void GribGtsHeaderOff(GribContext c)
        {
            GribApiProxyPINVOKE.GribGtsHeaderOff(c.Reference);
        }

        public static void GribGribexModeOn(GribContext c)
        {
            GribApiProxyPINVOKE.GribGribexModeOn(c.Reference);
        }

        public static void GribGetGribexMode(GribContext c)
        {
            int ret = GribApiProxyPINVOKE.GribGetGribexMode(c.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGribexModeOff(GribContext c)
        {
            GribApiProxyPINVOKE.GribGribexModeOff(c.Reference);
        }

        public static void GribContextSetMemoryProc(GribContext c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree, SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void gribrealloc)
        {
            GribApiProxyPINVOKE.GribContextSetMemoryProc(c.Reference, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree), SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void.getCPtr(gribrealloc));
        }

        public static void GribContextSetPersistentMemoryProc(GribContext c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree)
        {
            GribApiProxyPINVOKE.GribContextSetPersistentMemoryProc(c.Reference, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree));
        }

        public static void GribContextSetBufferMemoryProc(GribContext c, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void griballoc, SWIGTYPE_p_f_p_q_const__grib_context_p_void__void gribfree, SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void gribrealloc)
        {
            GribApiProxyPINVOKE.GribContextSetBufferMemoryProc(c.Reference, SWIGTYPE_p_f_p_q_const__grib_context_size_t__p_void.getCPtr(griballoc), SWIGTYPE_p_f_p_q_const__grib_context_p_void__void.getCPtr(gribfree), SWIGTYPE_p_f_p_q_const__grib_context_p_void_size_t__p_void.getCPtr(gribrealloc));
        }

        public static void GribContextSetPrintProc(GribContext c, SWIGTYPE_p_f_p_q_const__grib_context_p_void_p_q_const__char__void printp)
        {
            GribApiProxyPINVOKE.GribContextSetPrintProc(c.Reference, SWIGTYPE_p_f_p_q_const__grib_context_p_void_p_q_const__char__void.getCPtr(printp));
        }

        public static void GribContextSetLoggingProc(GribContext c, SWIGTYPE_p_f_p_q_const__grib_context_int_p_q_const__char__void logp)
        {
            GribApiProxyPINVOKE.GribContextSetLoggingProc(c.Reference, SWIGTYPE_p_f_p_q_const__grib_context_int_p_q_const__char__void.getCPtr(logp));
        }

        public static void GribMultiSupportOn(GribContext c)
        {
            GribApiProxyPINVOKE.GribMultiSupportOn(c.Reference);
        }

        public static void GribMultiSupportOff(GribContext c)
        {
            GribApiProxyPINVOKE.GribMultiSupportOff(c.Reference);
        }

        public static void GribMultiSupportResetFile(GribContext c, GribFile f)
        {
            GribApiProxyPINVOKE.GribMultiSupportResetFile(c.Reference, f.Reference);
        }

        public static string GribSamplesPath(GribContext c)
        {
            string ret = GribApiProxyPINVOKE.GribSamplesPath(c.Reference);
            return ret;
        }

        public static int GribGetApiVersion()
        {
            int ret = GribApiProxyPINVOKE.GribGetApiVersion();
            return ret;
        }

        public static string GribGetGitSha1()
        {
            string ret = GribApiProxyPINVOKE.GribGetGitSha1();
            return ret;
        }

        public static void GribPrintApiVersion(GribFile arg0)
        {
            GribApiProxyPINVOKE.GribPrintApiVersion(arg0.Reference);
        }

        public static GribKeysIterator GribKeysIteratorNew(GribHandle h, uint filter_flags, string name_space)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribKeysIteratorNew(h.Reference, filter_flags, name_space);

            return pVal == System.IntPtr.Zero ? null : new GribKeysIterator(pVal);
        }

        public static int GribKeysIteratorNext(GribKeysIterator kiter)
        {
            return GribApiProxyPINVOKE.GribKeysIteratorNext(kiter.Reference);
        }

        public static string GribKeysIteratorGetName(GribKeysIterator kiter)
        {
            string ret = GribApiProxyPINVOKE.GribKeysIteratorGetName(kiter.Reference);
            return ret;
        }

        public static void GribKeysIteratorDelete(GribKeysIterator kiter)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorDelete(kiter.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorRewind(GribKeysIterator kiter)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorRewind(kiter.Reference);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorSetFlags(GribKeysIterator kiter, uint flags)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorSetFlags(kiter.Reference, flags);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorGetLong(GribKeysIterator kiter, out int v, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorGetLong(kiter.Reference, out v, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorGetDouble(GribKeysIterator kiter, out double v, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorGetDouble(kiter.Reference, out v, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorGetString(GribKeysIterator kiter, System.Text.StringBuilder v, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorGetString(kiter.Reference, v, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribKeysIteratorGetBytes(GribKeysIterator kiter, byte[] v, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.GribKeysIteratorGetBytes(kiter.Reference, v, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribUpdateSectionsLengths(GribHandle h)
        {
            GribApiProxyPINVOKE.GribUpdateSectionsLengths(h.Reference);
        }

        public static string GribGetErrorMessage(int code)
        {
            string ret = GribApiProxyPINVOKE.GribGetErrorMessage(code);
            return ret;
        }

        public static void GribSetFailProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_int__void p)
        {
            GribApiProxyPINVOKE.GribSetFailProc(SWIGTYPE_p_f_p_q_const__char_p_q_const__char_int__void.getCPtr(p));
        }

        public static void GribSetExitProc(SWIGTYPE_p_f_int__void p)
        {
            GribApiProxyPINVOKE.GribSetExitProc(SWIGTYPE_p_f_int__void.getCPtr(p));
        }

        public static void GribExit(int code)
        {
            GribApiProxyPINVOKE.GribExit(code);
        }

        public static string GribGetTypeName(int type)
        {
            string ret = GribApiProxyPINVOKE.GribGetTypeName(type);
            return ret;
        }

        public static void GribGetNativeType(GribHandle h, string name, out int type)
        {
            int ret = GribApiProxyPINVOKE.GribGetNativeType(h.Reference, name, out type);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribCheck(string call, string file, int line, int e, string msg)
        {
            GribApiProxyPINVOKE.GribCheck(call, file, line, e, msg);
        }

        public static void GribSetValues(GribHandle h, SWIGTYPE_p_grib_values grib_values, SizeT arg_count)
        {
            int ret = GribApiProxyPINVOKE.GribSetValues(h.Reference, SWIGTYPE_p_grib_values.getCPtr(grib_values), arg_count.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribHandleNewFromPartialMessageCopy(GribContext c, byte[] data, SizeT size)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromPartialMessageCopy(c.Reference, data, size.Value);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle GribHandleNewFromPartialMessage(GribContext c, byte[] data, SizeT buflen)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribHandleNewFromPartialMessage(c.Reference, data, buflen.Value);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static bool GribIsMissing(GribHandle h, string key, out int err)
        {
            int ret = GribApiProxyPINVOKE.GribIsMissing(h.Reference, key, out err);

            if (err != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }

            return ret == 1;
        }

        public static bool GribIsDefined(GribHandle h, string key)
        {
            int ret = GribApiProxyPINVOKE.GribIsDefined(h.Reference, key);

            return ret == 1;
        }

        public static void GribSetMissing(GribHandle h, string key)
        {
            int ret = GribApiProxyPINVOKE.GribSetMissing(h.Reference, key);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetGaussianLatitudes(int truncation, double[] latitudes)
        {
            int ret = GribApiProxyPINVOKE.GribGetGaussianLatitudes(truncation, latitudes);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribJulianToDatetime(double jd, SWIGTYPE_p_long year, SWIGTYPE_p_long month, SWIGTYPE_p_long day, SWIGTYPE_p_long hour, SWIGTYPE_p_long minute, SWIGTYPE_p_long second)
        {
            int ret = GribApiProxyPINVOKE.GribJulianToDatetime(jd, SWIGTYPE_p_long.getCPtr(year), SWIGTYPE_p_long.getCPtr(month), SWIGTYPE_p_long.getCPtr(day), SWIGTYPE_p_long.getCPtr(hour), SWIGTYPE_p_long.getCPtr(minute), SWIGTYPE_p_long.getCPtr(second));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribDatetimeToJulian(int year, int month, int day, int hour, int minute, int second, SWIGTYPE_p_double jd)
        {
            int ret = GribApiProxyPINVOKE.GribDatetimeToJulian(year, month, day, hour, minute, second, SWIGTYPE_p_double.getCPtr(jd));

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static int GribJulianToDate(int jdate)
        {
            int ret = GribApiProxyPINVOKE.GribJulianToDate(jdate);
            return ret;
        }

        public static int GribDateToJulian(int ddate)
        {
            int ret = GribApiProxyPINVOKE.GribDateToJulian(ddate);
            return ret;
        }

        public static void GribGetReducedRow(int pl, double lon_first, double lon_last, SWIGTYPE_p_long npoints, SWIGTYPE_p_long ilon_first, SWIGTYPE_p_long ilon_last)
        {
            GribApiProxyPINVOKE.GribGetReducedRow(pl, lon_first, lon_last, SWIGTYPE_p_long.getCPtr(npoints), SWIGTYPE_p_long.getCPtr(ilon_first), SWIGTYPE_p_long.getCPtr(ilon_last));
        }

        public static void WmoReadAnyFromFile(GribFile f, byte[] buffer, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.WmoReadAnyFromFile(f.Reference, buffer, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void WmoReadGribFromFile(GribFile f, byte[] buffer, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.WmoReadGribFromFile(f.Reference, buffer, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void WmoReadBufrFromFile(GribFile f, byte[] buffer, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.WmoReadBufrFromFile(f.Reference, buffer, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void WmoReadGtsFromFile(GribFile f, byte[] buffer, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.WmoReadGtsFromFile(f.Reference, buffer, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void WmoReadAnyFromStream(byte[] stream_data, SWIGTYPE_p_f_p_void_p_void_long__long stream_proc, byte[] buffer, ref SizeT len)
        {
            int ret = GribApiProxyPINVOKE.WmoReadAnyFromStream(stream_data, SWIGTYPE_p_f_p_void_p_void_long__long.getCPtr(stream_proc), buffer, ref len.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static byte[] WmoReadAnyFromFileMalloc(GribFile f, int headers_only, ref SizeT size, ref SizeT offset, out int err)
        {
            return GribApiProxyPINVOKE.WmoReadAnyFromFileMalloc(f.Reference, headers_only, ref size.Value, ref offset.Value, out err);
        }

        public static byte[] WmoReadGtsFromFileMalloc(GribFile f, int headers_only, ref SizeT size, ref SizeT offset, out int err)
        {
            return GribApiProxyPINVOKE.WmoReadGtsFromFileMalloc(f.Reference, headers_only, ref size.Value, ref offset.Value, out err);
        }

        public static byte[] WmoReadBufrFromFileMalloc(GribFile f, int headers_only, ref SizeT size, ref SizeT offset, out int err)
        {
            return GribApiProxyPINVOKE.WmoReadBufrFromFileMalloc(f.Reference, headers_only, ref size.Value, ref offset.Value, out err);
        }

        public static GribHandle EccodeGtsNewFromFile(GribContext c, GribFile f, int headers_only, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.EccodeGtsNewFromFile(c.Reference, f.Reference, headers_only, out error);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle EccodeBufrNewFromFile(GribContext c, GribFile f, int headers_only, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.EccodeBufrNewFromFile(c.Reference, f.Reference, headers_only, out error);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static GribHandle EccodeGribNewFromFile(GribContext c, GribFile f, int headers_only, out int error)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.EccodeGribNewFromFile(c.Reference, f.Reference, headers_only, out error);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static void GribGetMessageOffset(GribHandle h, ref SizeT offset)
        {
            int ret = GribApiProxyPINVOKE.GribGetMessageOffset(h.Reference, ref offset.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static void GribGetMessageSize(GribHandle h, ref SizeT size)
        {
            int ret = GribApiProxyPINVOKE.GribGetMessageSize(h.Reference, ref size.Value);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static SWIGTYPE_p_grib_box GribBoxNew(GribHandle h, out int error)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribBoxNew(h.Reference, out error);
            SWIGTYPE_p_grib_box ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_box(cPtr, false);
            return ret;
        }

        public static SWIGTYPE_p_grib_points GribBoxGetPoints(SWIGTYPE_p_grib_box box, double north, double west, double south, double east, out int err)
        {
            global::System.IntPtr cPtr = GribApiProxyPINVOKE.GribBoxGetPoints(SWIGTYPE_p_grib_box.getCPtr(box), north, west, south, east, out err);
            SWIGTYPE_p_grib_points ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_grib_points(cPtr, false);
            return ret;
        }

        public static void GribPointsGetValues(GribHandle h, SWIGTYPE_p_grib_points points, out double val)
        {
            int ret = GribApiProxyPINVOKE.GribPointsGetValues(h.Reference, SWIGTYPE_p_grib_points.getCPtr(points), out val);

            if (ret != 0)
            {
                throw Grib.Api.Interop.GribApiException.Create(ret);
            }
        }

        public static GribHandle GribUtilSetSpec(GribHandle h, GribUtilGridSpec grid_spec, GribUtilPackingSpec packing_spec, int flags, double[] data_values, SizeT data_values_count, out int err)
        {
            System.IntPtr pVal = GribApiProxyPINVOKE.GribUtilSetSpec(h.Reference, GribUtilGridSpec.getCPtr(grid_spec), GribUtilPackingSpec.getCPtr(packing_spec), flags, data_values, data_values_count.Value, out err);

            return pVal == System.IntPtr.Zero ? null : new GribHandle(pVal);
        }

        public static readonly int GRIB_SECTION_PRODUCT = GribApiProxyPINVOKE.GRIB_SECTION_PRODUCT_get();
        public static readonly int GRIB_SECTION_GRID = GribApiProxyPINVOKE.GRIB_SECTION_GRID_get();
        public static readonly int GRIB_SECTION_LOCAL = GribApiProxyPINVOKE.GRIB_SECTION_LOCAL_get();
        public static readonly int GRIB_SECTION_DATA = GribApiProxyPINVOKE.GRIB_SECTION_DATA_get();
        public static readonly int GRIB_SECTION_BITMAP = GribApiProxyPINVOKE.GRIB_SECTION_BITMAP_get();
        public static readonly int GRIB_LOG_INFO = GribApiProxyPINVOKE.GRIB_LOG_INFO_get();
        public static readonly int GRIB_LOG_WARNING = GribApiProxyPINVOKE.GRIB_LOG_WARNING_get();
        public static readonly int GRIB_LOG_ERROR = GribApiProxyPINVOKE.GRIB_LOG_ERROR_get();
        public static readonly int GRIB_LOG_FATAL = GribApiProxyPINVOKE.GRIB_LOG_FATAL_get();
        public static readonly int GRIB_LOG_DEBUG = GribApiProxyPINVOKE.GRIB_LOG_DEBUG_get();
        public static readonly int GRIB_MISSING_LONG = GribApiProxyPINVOKE.GRIB_MISSING_LONG_get();
        public static readonly double GRIB_MISSING_DOUBLE = GribApiProxyPINVOKE.GRIB_MISSING_DOUBLE_get();
        public static readonly int GRIB_UTIL_SET_SPEC_FLAGS_ONLY_PACKING = GribApiProxyPINVOKE.GRIB_UTIL_SET_SPEC_FLAGS_ONLY_PACKING_get();
        public static readonly int GRIB_DUMP_FLAG_READ_ONLY = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_READ_ONLY_get();
        public static readonly int GRIB_DUMP_FLAG_DUMP_OK = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_DUMP_OK_get();
        public static readonly int GRIB_DUMP_FLAG_VALUES = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_VALUES_get();
        public static readonly int GRIB_DUMP_FLAG_CODED = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_CODED_get();
        public static readonly int GRIB_DUMP_FLAG_OCTECT = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_OCTECT_get();
        public static readonly int GRIB_DUMP_FLAG_ALIASES = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_ALIASES_get();
        public static readonly int GRIB_DUMP_FLAG_TYPE = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_TYPE_get();
        public static readonly int GRIB_DUMP_FLAG_HEXADECIMAL = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_HEXADECIMAL_get();
        public static readonly int GRIB_DUMP_FLAG_NO_DATA = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_NO_DATA_get();
        public static readonly int GRIB_DUMP_FLAG_ALL_DATA = GribApiProxyPINVOKE.GRIB_DUMP_FLAG_ALL_DATA_get();
        public static readonly int GRIB_NEAREST_SAME_GRID = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_GRID_get();
        public static readonly int GRIB_NEAREST_SAME_DATA = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_DATA_get();
        public static readonly int GRIB_NEAREST_SAME_POINT = GribApiProxyPINVOKE.GRIB_NEAREST_SAME_POINT_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_REGULAR_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REGULAR_LL_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_ROTATED_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_ROTATED_LL_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_REGULAR_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REGULAR_GG_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_ROTATED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_ROTATED_GG_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_GG_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_SH = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_SH_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_LL = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_LL_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_POLAR_STEREOGRAPHIC = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_POLAR_STEREOGRAPHIC_get();
        public static readonly int GRIB_UTIL_GRID_SPEC_REDUCED_ROTATED_GG = GribApiProxyPINVOKE.GRIB_UTIL_GRID_SPEC_REDUCED_ROTATED_GG_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_SAME_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SAME_AS_INPUT_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_SPECTRAL_COMPLEX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SPECTRAL_COMPLEX_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_SPECTRAL_SIMPLE = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_SPECTRAL_SIMPLE_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_JPEG = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_JPEG_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_COMPLEX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_COMPLEX_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_MATRIX = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SIMPLE_MATRIX_get();
        public static readonly int GRIB_UTIL_PACKING_TYPE_GRID_SECOND_ORDER = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_TYPE_GRID_SECOND_ORDER_get();
        public static readonly int GRIB_UTIL_PACKING_SAME_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_SAME_AS_INPUT_get();
        public static readonly int GRIB_UTIL_PACKING_USE_PROVIDED = GribApiProxyPINVOKE.GRIB_UTIL_PACKING_USE_PROVIDED_get();
        public static readonly int GRIB_UTIL_ACCURACY_SAME_BITS_PER_VALUES_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_SAME_BITS_PER_VALUES_AS_INPUT_get();
        public static readonly int GRIB_UTIL_ACCURACY_USE_PROVIDED_BITS_PER_VALUES = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_USE_PROVIDED_BITS_PER_VALUES_get();
        public static readonly int GRIB_UTIL_ACCURACY_SAME_DECIMAL_SCALE_FACTOR_AS_INPUT = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_SAME_DECIMAL_SCALE_FACTOR_AS_INPUT_get();
        public static readonly int GRIB_UTIL_ACCURACY_USE_PROVIDED_DECIMAL_SCALE_FACTOR = GribApiProxyPINVOKE.GRIB_UTIL_ACCURACY_USE_PROVIDED_DECIMAL_SCALE_FACTOR_get();
        public static readonly int GRIB_SUCCESS = GribApiProxyPINVOKE.GRIB_SUCCESS_get();
        public static readonly int GRIB_END_OF_FILE = GribApiProxyPINVOKE.GRIB_END_OF_FILE_get();
        public static readonly int GRIB_INTERNAL_ERROR = GribApiProxyPINVOKE.GRIB_INTERNAL_ERROR_get();
        public static readonly int GRIB_BUFFER_TOO_SMALL = GribApiProxyPINVOKE.GRIB_BUFFER_TOO_SMALL_get();
        public static readonly int GRIB_NOT_IMPLEMENTED = GribApiProxyPINVOKE.GRIB_NOT_IMPLEMENTED_get();
        public static readonly int GRIB_7777_NOT_FOUND = GribApiProxyPINVOKE.GRIB_7777_NOT_FOUND_get();
        public static readonly int GRIB_ARRAY_TOO_SMALL = GribApiProxyPINVOKE.GRIB_ARRAY_TOO_SMALL_get();
        public static readonly int GRIB_FILE_NOT_FOUND = GribApiProxyPINVOKE.GRIB_FILE_NOT_FOUND_get();
        public static readonly int GRIB_CODE_NOT_FOUND_IN_TABLE = GribApiProxyPINVOKE.GRIB_CODE_NOT_FOUND_IN_TABLE_get();
        public static readonly int GRIB_WRONG_ARRAY_SIZE = GribApiProxyPINVOKE.GRIB_WRONG_ARRAY_SIZE_get();
        public static readonly int GRIB_NOT_FOUND = GribApiProxyPINVOKE.GRIB_NOT_FOUND_get();
        public static readonly int GRIB_IO_PROBLEM = GribApiProxyPINVOKE.GRIB_IO_PROBLEM_get();
        public static readonly int GRIB_INVALID_MESSAGE = GribApiProxyPINVOKE.GRIB_INVALID_MESSAGE_get();
        public static readonly int GRIB_DECODING_ERROR = GribApiProxyPINVOKE.GRIB_DECODING_ERROR_get();
        public static readonly int GRIB_ENCODING_ERROR = GribApiProxyPINVOKE.GRIB_ENCODING_ERROR_get();
        public static readonly int GRIB_NO_MORE_IN_SET = GribApiProxyPINVOKE.GRIB_NO_MORE_IN_SET_get();
        public static readonly int GRIB_GEOCALCULUS_PROBLEM = GribApiProxyPINVOKE.GRIB_GEOCALCULUS_PROBLEM_get();
        public static readonly int GRIB_OUT_OF_MEMORY = GribApiProxyPINVOKE.GRIB_OUT_OF_MEMORY_get();
        public static readonly int GRIB_READ_ONLY = GribApiProxyPINVOKE.GRIB_READ_ONLY_get();
        public static readonly int GRIB_INVALID_ARGUMENT = GribApiProxyPINVOKE.GRIB_INVALID_ARGUMENT_get();
        public static readonly int GRIB_NULL_HANDLE = GribApiProxyPINVOKE.GRIB_NULL_HANDLE_get();
        public static readonly int GRIB_INVALID_SECTION_NUMBER = GribApiProxyPINVOKE.GRIB_INVALID_SECTION_NUMBER_get();
        public static readonly int GRIB_VALUE_CANNOT_BE_MISSING = GribApiProxyPINVOKE.GRIB_VALUE_CANNOT_BE_MISSING_get();
        public static readonly int GRIB_WRONG_LENGTH = GribApiProxyPINVOKE.GRIB_WRONG_LENGTH_get();
        public static readonly int GRIB_INVALID_TYPE = GribApiProxyPINVOKE.GRIB_INVALID_TYPE_get();
        public static readonly int GRIB_WRONG_STEP = GribApiProxyPINVOKE.GRIB_WRONG_STEP_get();
        public static readonly int GRIB_WRONG_STEP_UNIT = GribApiProxyPINVOKE.GRIB_WRONG_STEP_UNIT_get();
        public static readonly int GRIB_INVALID_FILE = GribApiProxyPINVOKE.GRIB_INVALID_FILE_get();
        public static readonly int GRIB_INVALID_GRIB = GribApiProxyPINVOKE.GRIB_INVALID_GRIB_get();
        public static readonly int GRIB_INVALID_INDEX = GribApiProxyPINVOKE.GRIB_INVALID_INDEX_get();
        public static readonly int GRIB_INVALID_ITERATOR = GribApiProxyPINVOKE.GRIB_INVALID_ITERATOR_get();
        public static readonly int GRIB_INVALID_KEYS_ITERATOR = GribApiProxyPINVOKE.GRIB_INVALID_KEYS_ITERATOR_get();
        public static readonly int GRIB_INVALID_NEAREST = GribApiProxyPINVOKE.GRIB_INVALID_NEAREST_get();
        public static readonly int GRIB_INVALID_ORDERBY = GribApiProxyPINVOKE.GRIB_INVALID_ORDERBY_get();
        public static readonly int GRIB_MISSING_KEY = GribApiProxyPINVOKE.GRIB_MISSING_KEY_get();
        public static readonly int GRIB_OUT_OF_AREA = GribApiProxyPINVOKE.GRIB_OUT_OF_AREA_get();
        public static readonly int GRIB_CONCEPT_NO_MATCH = GribApiProxyPINVOKE.GRIB_CONCEPT_NO_MATCH_get();
        public static readonly int GRIB_NO_DEFINITIONS = GribApiProxyPINVOKE.GRIB_NO_DEFINITIONS_get();
        public static readonly int GRIB_WRONG_TYPE = GribApiProxyPINVOKE.GRIB_WRONG_TYPE_get();
        public static readonly int GRIB_END = GribApiProxyPINVOKE.GRIB_END_get();
        public static readonly int GRIB_NO_VALUES = GribApiProxyPINVOKE.GRIB_NO_VALUES_get();
        public static readonly int GRIB_WRONG_GRID = GribApiProxyPINVOKE.GRIB_WRONG_GRID_get();
        public static readonly int GRIB_END_OF_INDEX = GribApiProxyPINVOKE.GRIB_END_OF_INDEX_get();
        public static readonly int GRIB_NULL_INDEX = GribApiProxyPINVOKE.GRIB_NULL_INDEX_get();
        public static readonly int GRIB_PREMATURE_END_OF_FILE = GribApiProxyPINVOKE.GRIB_PREMATURE_END_OF_FILE_get();
        public static readonly int GRIB_INTERNAL_ARRAY_TOO_SMALL = GribApiProxyPINVOKE.GRIB_INTERNAL_ARRAY_TOO_SMALL_get();
        public static readonly int GRIB_MESSAGE_TOO_LARGE = GribApiProxyPINVOKE.GRIB_MESSAGE_TOO_LARGE_get();
        public static readonly int GRIB_CONSTANT_FIELD = GribApiProxyPINVOKE.GRIB_CONSTANT_FIELD_get();
        public static readonly int GRIB_SWITCH_NO_MATCH = GribApiProxyPINVOKE.GRIB_SWITCH_NO_MATCH_get();
        public static readonly int GRIB_UNDERFLOW = GribApiProxyPINVOKE.GRIB_UNDERFLOW_get();
        public static readonly int GRIB_MESSAGE_MALFORMED = GribApiProxyPINVOKE.GRIB_MESSAGE_MALFORMED_get();
        public static readonly int GRIB_CORRUPTED_INDEX = GribApiProxyPINVOKE.GRIB_CORRUPTED_INDEX_get();
        public static readonly int GRIB_INVALID_BPV = GribApiProxyPINVOKE.GRIB_INVALID_BPV_get();
        public static readonly int GRIB_DIFFERENT_EDITION = GribApiProxyPINVOKE.GRIB_DIFFERENT_EDITION_get();
        public static readonly int GRIB_VALUE_DIFFERENT = GribApiProxyPINVOKE.GRIB_VALUE_DIFFERENT_get();
        public static readonly int GRIB_INVALID_KEY_VALUE = GribApiProxyPINVOKE.GRIB_INVALID_KEY_VALUE_get();
    }

}
